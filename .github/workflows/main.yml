name: Publish Docker images and build Helm chart
on:
  push:
    tags:
      - '*.*.*'
jobs:
  build_and_package:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Generate Image Tag Reference
        id: docker-tag
        uses: yuya-takeyama/docker-tag-from-github-ref-action@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v2.1.0
        with:
          context: ./src/website
          file: ./src/website/Dockerfile
          tags: ghcr.io/philosoftware/appstarter/web:${{ steps.docker-tag.outputs.tag }}
          push: true
      - name: Install Octopus CLI
        run: |
          sudo apt update && sudo apt install --no-install-recommends gnupg curl ca-certificates apt-transport-https && \
          curl -sSfL https://apt.octopus.com/public.key | sudo apt-key add - && \
          sudo sh -c "echo deb https://apt.octopus.com/ stable main > /etc/apt/sources.list.d/octopus.com.list" && \
          sudo apt update && sudo apt install octopuscli 
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0
      - name: Package Helm Chart
        run: helm package ./chart --version ${{ steps.docker-tag.outputs.tag }} --app-version ${{ steps.docker-tag.outputs.tag }}
      - name: Push To Octopus Server
        run: octo push --package="./app-starter-${{ steps.docker-tag.outputs.tag }}.tgz" --server="${{ secrets.OCTOPUS_SERVER }}" --apiKey="${{ secrets.OCTOPUS_APIKEY }}"
      - name: Create Octopus Release
        run: octo create-release --project=${{ secrets.OCTOPUS_PROJECT_ID }} --deployto=Production --version=${{ steps.docker-tag.outputs.tag }} --server="${{ secrets.OCTOPUS_SERVER }}" --apiKey="${{ secrets.OCTOPUS_APIKEY }}"
